{"version":3,"sources":["Cell.js","Board.js","app.js","index.js"],"names":["Cell","props","handleClick","bind","evt","coordString","this","x","y","flipCellsAroundMe","classes","isLit","className","onClick","cellKey","Component","Board","state","board","createBoard","hasWon","flipCellsAround","numRows","row","numColumns","push","Math","random","chanceLightStartsOn","coord","split","map","Number","flipCell","forEach","cell","console","log","setState","tableBoard","toString","defaultProps","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RA+BeA,E,kDA1Bd,WAAaC,GACZ,IAAD,8BACC,cAAOA,IACFC,YAAc,EAAKA,YAAYC,KAAjB,gBAFpB,E,+CAKA,SAAaC,GAGZ,IAAMC,EAAW,UAAMC,KAAKL,MAAMM,EAAjB,YAAsBD,KAAKL,MAAMO,GAClDF,KAAKL,MAAMQ,kBAAmBJ,K,oBAG/B,WAEC,IAAIK,EAAU,QAAWJ,KAAKL,MAAMU,MAAQ,YAAc,IAC1D,OACC,oBAECC,UAAYF,EACZG,QAAUP,KAAKJ,aAFTI,KAAKL,MAAMa,a,GApBFC,aC4BbC,G,wDAQL,WAAYf,GACX,IAAD,8BACC,cAAMA,IACDgB,MACL,CACCC,MAAO,EAAKC,cACZC,QAAQ,GAGT,EAAKD,YAAc,EAAKA,YAAYhB,KAAjB,gBACnB,EAAKkB,gBAAkB,EAAKA,gBAAgBlB,KAArB,gBATxB,E,+CAeA,WAkBC,IAhBA,IAAIe,EAAQ,GAgBFX,EAAI,EAAGA,EAAID,KAAKL,MAAMqB,QAASf,IACzC,CAEC,IADA,IAAIgB,EAAM,GACAf,EAAI,EAAGA,EAAIF,KAAKL,MAAMuB,WAAYhB,IAE3Ce,EAAIE,KAAKC,KAAKC,SAAWrB,KAAKL,MAAM2B,qBAErCV,EAAMO,KAAKF,GAGZ,OAAOL,I,6BAKR,SAAiBW,GACjB,MAE6BvB,KAAKL,MAA5BuB,EAFN,EAEMA,WAAYF,EAFlB,EAEkBA,QACbJ,EAAQZ,KAAKW,MAAMC,MAHxB,EAIcW,EAAMC,MAAM,KAAKC,IAAIC,QAJnC,mBAIMzB,EAJN,KAISC,EAJT,KAOC,SAASyB,EAAU1B,EAAGC,GAGjBD,GAAK,GAAKA,EAAIiB,GAAchB,GAAK,GAAKA,EAAIc,IAE7CJ,EAAMX,GAAGC,IAAMU,EAAMX,GAAGC,IAI1ByB,EAAU1B,EAAGC,GACbyB,EAAU1B,EAAGC,EAAE,GACfyB,EAAU1B,EAAGC,EAAE,GACfyB,EAAU1B,EAAE,EAAGC,GACfyB,EAAU1B,EAAE,EAAGC,GAIf,IAAIY,GAAS,EACbF,EAAMgB,SAAQ,SAAAX,GAEbA,EAAIW,SAAS,SAAAC,IAEC,IAATA,IAEHC,QAAQC,KAAI,GACZjB,GAAS,SAKZd,KAAKgC,SACL,CACCpB,MAAOA,EACPE,OAAQA,M,oBAKV,WACC,IAAD,OACCd,KAAKa,cAGL,IADA,IAAIoB,EAAa,GACPhC,EAAI,EAAGA,EAAID,KAAKL,MAAMqB,QAASf,IACzC,CAEC,IADA,IAAIgB,EAAM,GADX,WAEUf,GAER,IAAIqB,EAAK,UAAMtB,EAAN,YAAWC,GACpBe,EAAIE,KACH,cAAC,EAAD,CAECd,MAAQ,EAAKM,MAAMC,MAAMX,GAAGC,GAC5BC,kBAAoB,kBAAM,EAAKY,gBAAgBQ,KAHhD,UACUtB,EADV,YACeC,MALRA,EAAI,EAAGA,EAAIF,KAAKL,MAAMuB,WAAYhB,IAC1C,EADQA,GAUT+B,EAAWd,KAAK,6BAA2BF,GAAjBhB,EAAEiC,aAE7B,OACC,8BAGElC,KAAKW,MAAMG,OAGV,sBAAKR,UAAU,UAAf,UACC,qBAAKA,UAAU,cAAf,iBACA,qBAAKA,UAAU,YAAf,oBAKD,sBAAKA,UAAU,oBAAf,UACC,sBAAKA,UAAU,cAAf,UACC,qBAAKA,UAAU,cAAf,oBACA,qBAAKA,UAAU,YAAf,oBAED,uBAAOA,UAAU,QAAjB,SACC,gCAAS2B,e,GA/IGxB,cAAdC,EAEEyB,aACP,CACCjB,WAAY,EACZF,QAAS,EACTM,oBAAqB,IAoJRZ,QC5KA0B,MATf,WAEC,OACC,qBAAK9B,UAAU,MAAf,SACC,cAAC,EAAD,OCJH+B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.594b27a0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Cell.css';\n\nclass Cell extends Component\n{\n\tconstructor( props )\n\t{\n\t\tsuper( props );\n\t\tthis.handleClick = this.handleClick.bind( this );\n\t}\n\n\thandleClick( evt )\n\t{\n\t\t// Call to flip cells around cell\n\t\tconst coordString = `${this.props.x}-${this.props.y}`;\n\t\tthis.props.flipCellsAroundMe( coordString );\n\t}\n\n\trender()\n\t{\n\t\tlet classes = 'Cell' + ( this.props.isLit ? \" Cell-lit\" : \"\" );\n\t\treturn(\n\t\t\t<td \n\t\t\t\tkey={ this.props.cellKey }\n\t\t\t\tclassName={ classes } \n\t\t\t\tonClick={ this.handleClick } \n\t\t\t/>\n\t\t);\n\t}\n}\n\nexport default Cell;","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - numRows: number of rows of board\n * - numColumns: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n *\n */\nclass Board extends Component \n{\n\tstatic defaultProps = \n\t{\n\t\tnumColumns: 5,\n\t\tnumRows: 5,\n\t\tchanceLightStartsOn: 0.6 // The higher the value, the more chance lights will be on\n\t}\n\tconstructor(props) \n\t{\n\t\tsuper(props);\n\t\tthis.state = \n\t\t{\n\t\t\tboard: this.createBoard(),\n\t\t\thasWon: false\n\t\t};\n\n\t\tthis.createBoard = this.createBoard.bind(this);\n\t\tthis.flipCellsAround = this.flipCellsAround.bind(this);\n\t}\n\n\t/**\n\t * create a board numRows high/numColumns wide, each cell randomly lit or unlit \n\t */\n\tcreateBoard() \n\t{\n\t\tlet board = [];\n\t\t\n\t\t// MY SOLUTION\n\t\t// while( board.length < 5 )\n\t\t// {\n\t\t// \tconst line = new Array(5);\n\t\t// \tfor( let i = 0; i < line.length; i++ )\n\t\t// \t{\n\t\t// \t\tconst num = this.props.chanceLightStartsOn * (Math.random() * 2);\n\t\t// \t\tconst random = Math.floor( num );\n\t\t// \t\tline[i] = random === 1 ? true : false;\n\t\t// \t}\n\t\t\t\n\t\t// \tboard.push(line);\n\t\t// }\n\n\t\tfor ( let x = 0; x < this.props.numRows; x++ )\n\t\t{\n\t\t\tlet row = [];\n\t\t\tfor ( let y = 0; y < this.props.numColumns; y++ )\n\t\t\t{\n\t\t\t\trow.push(Math.random() < this.props.chanceLightStartsOn)\n\t\t\t}\n\t\t\tboard.push(row);\n\t\t}\n\n\t\treturn board\n\t}\n\t\n\n  \t/** handle changing a cell: update board & determine if winner */\n\tflipCellsAround( coord ) \n\t{\n\t\t// Creating variables numColumns and numRows to equal this.props.numColumns\n\t\tlet {numColumns, numRows} = this.props;\n\t\tlet board = this.state.board;\n\t\tlet [x, y] = coord.split(\"-\").map(Number);\n\n\n\t\tfunction flipCell( x, y ) \n\t\t{\n\t\t\t// if this coord is actually on board, flip it\n\t\t\tif (x >= 0 && x < numColumns && y >= 0 && y < numRows) \n\t\t\t{\n\t\t\t\tboard[x][y] = !board[x][y];\n\t\t\t}\n\t\t}\n\t\t\n\t\tflipCell( x, y );\n\t\tflipCell( x, y-1 );\n\t\tflipCell( x, y+1 );\n\t\tflipCell( x-1, y );\n\t\tflipCell( x+1, y );\n\n\t\t// THIS CODE DOESN'T WORK FOR SOME REASON\n\t\t// let hasWon = board.every(row => row.every(cell => !cell));\n\t\tlet hasWon = true;\n\t\tboard.forEach(row => \n\t\t{\n\t\t\trow.forEach( cell => \n\t\t\t{\n\t\t\t\tif( cell === true )\n\t\t\t\t{\n\t\t\t\t\tconsole.log(false);\n\t\t\t\t\thasWon = false;\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\n\t\tthis.setState(\n\t\t{\n\t\t\tboard: board, \n\t\t\thasWon: hasWon\n\t\t});\n\t}\n\n\t/** Render game board or winning message. */\n\trender() \n\t{\n\t\tthis.createBoard();\n\n\t\tlet tableBoard = [];\n\t\tfor ( let x = 0; x < this.props.numRows; x++ )\n\t\t{\n\t\t\tlet row = [];\n\t\t\tfor( let y = 0; y < this.props.numColumns; y++ )\n\t\t\t{\n\t\t\t\tlet coord = `${x}-${y}`;\n\t\t\t\trow.push(\n\t\t\t\t\t<Cell \n\t\t\t\t\t\tkey={ `${x}-${y}` } \n\t\t\t\t\t\tisLit={ this.state.board[x][y] }\n\t\t\t\t\t\tflipCellsAroundMe={ () => this.flipCellsAround(coord) }\n\t\t\t\t\t/>)\n\t\t\t}\n\t\t\ttableBoard.push(<tr key={ x.toString() }>{ row }</tr>);\n\t\t}\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t{\n\t\t\t\t\t// if the game is won, just show a winning msg & render nothing else\n\t\t\t\t\tthis.state.hasWon \n\t\t\t\t\t? \n\t\t\t\t\t(\n\t\t\t\t\t\t<div className='Winning'>\n\t\t\t\t\t\t\t<div className='neon-orange'>You</div>\n\t\t\t\t\t\t\t<div className='neon-blue'>Win</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) \n\t\t\t\t\t: \n\t\t\t\t\t(\t\n\t\t\t\t\t\t<div className='content-container'>\n\t\t\t\t\t\t\t<div className='Board-title'>\n\t\t\t\t\t\t\t\t<div className='neon-orange'>Lights</div>\n\t\t\t\t\t\t\t\t<div className='neon-blue'>Out</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<table className='Board'>\n\t\t\t\t\t\t\t\t<tbody>{ tableBoard }</tbody>\n\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\nexport default Board;\n","import './App.css';\n\nimport Board from './Board';\n\nfunction App() \n{\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Board />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}